<html>
<head>

  <!-- JQuery. Skype for Web requires JQuery to work. -->
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js"></script>

  <!-- Bootstrap layouts and themes. Totally optional, but it makes the examples look much nicer :) -->
 <link rel="stylesheet" type="text/css" href="../../assets/metro/css/metro-bootstrap.min.css">
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.1/js/bootstrap.min.js"></script>

  <!-- This is the Skype Web SDK -->
<script type="text/javascript" src="//swx.cdn.skype.com/shared/v/1.1.23.0/SkypeBootstrap.js"></script>
</head>
<body>
<div id="header"></div>

<!-- Skype Web SDK Code by Tom Morgan | thoughtstuff.co.uk -->
<!-- This is one of a number of examples showing how to use the Skype Web SDK. The full list is at skypewebsdk.com -->
<!-- Disclaimer: use at your own risk. -->

  <div class="form-horizontal">
    <div class="form-group">
      <label for="username" class="col-sm-2 control-label">Username</label>
      <div class="col-sm-10">
        <input type="email" class="form-control" id="username" placeholder="Email">
      </div>
    </div>
    <div class="form-group">
      <label for="password" class="col-sm-2 control-label">Password</label>
      <div class="col-sm-10">
        <input type="password" class="form-control" id="password" placeholder="Password">
      </div>
    </div>

    <div class="form-group">
      <div class="col-sm-offset-2 col-sm-10">
        <button class="btn btn-default" id="btnLogIn">Log in</button>
      </div>
    </div>

    <div class="form-group">
      <div class="col-sm-offset-2 col-sm-10">
        <button class="btn btn-default" id="btnLogOut">Log out</button>
      </div>
    </div>
  </div>

  <div>
    <span id="loginStatus"></span>
  </div>

  <hr/>

 <div id="divIncomingNotification" style="display: none;" >

<span id="lblNewConversationMsg"></span>
  <div class="form-horizontal">
    <div class="form-group">
      <div class="col-sm-offset-2 col-sm-10">
        <button class="btn btn-default" id="btnAccept" >Accept</button>
      </div>
    </div>

    <div class="form-group">
      <div class="col-sm-offset-2 col-sm-10">
        <button class="btn btn-default" id="btnDecline" >Decline</button>
      </div>
    </div>
  </div>

 </div> <!-- IncomingNotification -->

<div id="divActiveConversationControls" style="display: none;">

  <div class="form-horizontal">   
   
     <div class="form-group">
      <div class="col-sm-offset-2 col-sm-10">
        <button class="btn btn-default" id="btnStopConversation">Stop</button>
      </div>
    </div>
  </div>

    Conversation State: <span id="lblConversationState"></span>
    <ul id='conversationText'></ul>

<hr/>

  <div class="form-horizontal">
    <div class="form-group">
      <label for="message" class="col-sm-2 control-label">Send Message:</label>
      <div class="col-sm-10">
        <input type="email" class="form-control" id="message" placeholder="Message to send">
      </div>
    </div>  

    <div class="form-group">
      <div class="col-sm-offset-2 col-sm-10">
        <button class="btn btn-default" id="btnSendIM">Send IM</button>
      </div>
    </div>
  </div>

</div> <!-- ActiveConversationControls -->
  
  
  
  <div id="footer"></div>
  
  <!-- This is not needed for the samples to run, but adds standard headers and footers to the samples, to display title, instructions, about etc.
       If you're taking this code and using it yourself, you can remove this.-->
   <script type="text/javascript" src="../../assets/layoutcodesample-min.js"></script>
  
  <script type="text/javascript">

  <!-- These variables are only needed for laying out the code sample, they are not part of the sample code. -->
  var pageTitle = 'Receiving a Conversation';
  var blogPostLocation = "http://thoughtstuff.co.uk";
  var githubLocation = "http://github.com";
 


 var client;
  $(function () {
    'use strict';

	Skype.initialize({
            apiKey: 'SWX-BUILD-SDK',
        }, function (api) {
            client = new api.application();           
			
		// whenever client.state changes, display its value
		client.signInManager.state.changed(function (state) {
		$('#loginStatus').text("Login State: " + state);
		});
	
        }, function (err) {
            alert('Error loading Skype Web SDK: ' + err);
        }); 

    $('#btnLogIn').click(function () {

        // start signing in
        client.signInManager.signIn({
          username: $('#username').val(),
          password: $('#password').val()
        }).then(function () {
            //log in worked!
            alert('Logged in!');
            ListenForNewConversations();
            
          }, function (error) {
            //Something went wrong.
            alert(error);
          });
      });

    $('#btnLogOut').click(function () {
        // start signing out
        client.signInManager.signOut()
        .then(function () {
               //log out worked!
               alert('Logged out!');               
             }, function (error) {
                //Something went wrong.
                alert(error);
              });
      });


    $('#btnStopConversation').click(function () {
      StopConversation();
    });

        $('#btnSendIM').click(function () {
      conversation.chatService.sendMessage($('#message').val());
    });

        $('#btnAccept').click(function () {
          AcceptConversation();
        });

        $('#btnDecline').click(function () {
          RejectConversation();
        })

  function ListenForNewConversations() {
    client.conversationsManager.conversations.added(function (newConversation) {
      if (newConversation.chatService.accept.enabled() && newConversation.chatService.state() == 'Notified')
      {
        conversation = newConversation;
        $('#lblNewConversationMsg').text('Incoming Conversation from ' + conversation.participants()[0].name());
        $('#divIncomingNotification').show();
      }
    });
  }

  function AcceptConversation() {
    
//register for the conversation state changing to connected.
  conversation.chatService.state.changed(function(newState){
  $('#lblConversationState').text(newState);
    if (newState == 'Disconnected') {
     $('#divActiveConversationControls').hide();
  }
  });

 
//register for new messages added to the historyService object
  conversation.historyService.activityItems.added(function (newMsg){
    if (newMsg.type() == 'TextMessage')
    {
         var direction;
         if (newMsg.direction() == 'Incoming') 
            direction = "<--";          
         else
         {
            direction = "-->";          
          }

         $("#conversationText").append('<li><b>' + direction + '</b>&nbsp; ' + newMsg.sender.displayName() + ' : ' + newMsg.text() + '</li>');  
    }
  });

   //finally, accept the conversation 
    conversation.chatService.accept();


    //update the UI
    $('#divIncomingNotification').hide();
    $('#divActiveConversationControls').show();
  }

  function RejectConversation() {
    conversation.chatService.reject();
    $('#divIncomingNotification').hide();
  }


function StopConversation() {
if (conversation != null)
  //conversation.chatService.stop();  
//client.conversationsManager.conversations.remove(conversation)
conversation.leave();
}


});

</script>

</body>
</html>
