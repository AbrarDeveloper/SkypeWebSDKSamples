<html>
<head>

  <!-- JQuery. Skype for Web requires JQuery to work. -->
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js"></script>

  <!-- Bootstrap layouts and themes. Totally optional, but it makes the examples look much nicer :) -->
  <link rel="stylesheet" type="text/css" href="../../assets/metro/css/metro-bootstrap.min.css">
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.1/js/bootstrap.min.js"></script>

 <!-- This is the Skype Web SDK -->
<script type="text/javascript" src="//swx.cdn.skype.com/shared/v/1.1.23.0/SkypeBootstrap.js"></script>
</head>
<body>
<div id="header"></div>

<!-- Skype Web SDK Code by Tom Morgan | thoughtstuff.co.uk -->
<!-- This is one of a number of examples showing how to use the Skype Web SDK. The full list is at skypewebsdk.com -->
<!-- Disclaimer: use at your own risk. -->

  <div class="form-horizontal">
    <div class="form-group">
      <label for="username" class="col-sm-2 control-label">Username</label>
      <div class="col-sm-10">
        <input type="email" class="form-control" id="username" placeholder="Email">
      </div>
    </div>
    <div class="form-group">
      <label for="password" class="col-sm-2 control-label">Password</label>
      <div class="col-sm-10">
        <input type="password" class="form-control" id="password" placeholder="Password">
      </div>
    </div>

    <div class="form-group">
      <div class="col-sm-offset-2 col-sm-10">
        <button class="btn btn-default" id="btnLogIn">Log in</button>
      </div>
    </div>

    <div class="form-group">
      <div class="col-sm-offset-2 col-sm-10">
        <button class="btn btn-default" id="btnLogOut">Log out</button>
      </div>
    </div>
  </div>

  <div>
    <span id="loginStatus"></span>
  </div>

  <hr/>

  <div class="form-horizontal">
    <div class="form-group">
      <label for="contact1" class="col-sm-2 control-label">Start Conversation with:</label>
      <div class="col-sm-10">
        <input type="email" class="form-control" id="contact1" placeholder="Contact SIP Address">
      </div>
    </div>  
    <div class="form-group">
      <label for="contact2" class="col-sm-2 control-label">and:</label>
      <div class="col-sm-10">
        <input type="email" class="form-control" id="contact2" placeholder="Contact SIP Address">
      </div>
    </div>  

    <div class="form-group">
      <div class="col-sm-offset-2 col-sm-10">
        <button class="btn btn-default" id="btnCreateConference" disabled="disabled">Create Conference</button>
      </div>
    </div>
  </div>

  <hr/>

 isGroupConversation: <span id="isGroupConversation"></span> <br/>
 Conference URI: <span id="conferenceUri"></span>

  
  <div id="footer"></div>
  
  <!-- This is not needed for the samples to run, but adds standard headers and footers to the samples, to display title, instructions, about etc.
       If you're taking this code and using it yourself, you can remove this.-->
   <script type="text/javascript" src="../../assets/layoutcodesample-min.js"></script>
  
  <script type="text/javascript">

  <!-- These variables are only needed for laying out the code sample, they are not part of the sample code. -->
  var pageTitle = 'Creating a Conference';
  var blogPostLocation = "http://blog.thoughtstuff.co.uk/2015/06/learn-skype-web-sdk-day-26-creating-a-conference/";
  var githubLocation = "https://github.com/tomorgan/SkypeWebSDKSamples/blob/gh-pages/Conferencing/1-CreatingAConference/index.htm";


    var client;
  $(function () {
    'use strict';

	Skype.initialize({
            apiKey: 'SWX-BUILD-SDK',
        }, function (api) {
            client = new api.application();           
			
		// whenever client.state changes, display its value
		client.signInManager.state.changed(function (state) {
		$('#loginStatus').text("Login State: " + state);
		});
	
        }, function (err) {
            alert('Error loading Skype Web SDK: ' + err);
        }); 

    $('#btnLogIn').click(function () {

        // start signing in
        client.signInManager.signIn({
          username: $('#username').val(),
          password: $('#password').val()
        }).then(function () {
            //log in worked!
            alert('Logged in!');
            $('#btnCreateConference').prop('disabled', false);
            
          }, function (error) {
            //Something went wrong.
            alert(error);
          });
      });

    $('#btnLogOut').click(function () {
        // start signing out
        client.signInManager.signOut()
        .then(function () {
               //log out worked!
               alert('Logged out!');
               $('#btnCreateConference').prop('disabled', true);
             }, function (error) {
                //Something went wrong.
                alert(error);
              });
      });

    $('#btnCreateConference').click(function () {
      CreateConference($('#contact1').val(),$('#contact2').val());
    });

  function CreateConference (contactSIP1,contactSIP2) {
  //first, get the people to start a conference with. We're using 2 people which
  //is the minimum for a conference, but you could easily use more.
  var contact1;
  GetContactFromName(contactSIP1).then(function (results) {
    results.forEach(function (result) {
    contact1 = result.result;          
    });

  var contact2;
  GetContactFromName(contactSIP2).then(function (results) {
    results.forEach(function (result) {
    contact2 = result.result;          
  });


 //create the conversation object
 var conversation = client.conversationsManager.createConversation();

 //add the 2 contacts to the conversation by creating a conversation participant object
 //for each one.
 var convParticipant1 = conversation.createParticipant(contact1);
 var convParticipant2 = conversation.createParticipant(contact2);
 conversation.participants.add(convParticipant1);
 conversation.participants.add(convParticipant2);
 
 conversation.isGroupConversation.changed(function () {
 $('#isGroupConversation').text(conversation.isGroupConversation());
 });

 conversation.uri.changed(function () {
 $('#conferenceUri').text(conversation.uri());
 })

 //add the newly created conference/conversation to the ConversationManager list
 client.conversationsManager.conversations.add(conversation);

 conversation.chatService.start();

});
});

}

function GetContactFromName(contactSIP)
{
 var query = client.personsAndGroupsManager.createPersonSearchQuery();
 query.text(contactSIP);
 query.limit(1);
 return query.getMore();          
}

});

</script>

</body>
</html>
